feat(matches): scores & history filtering

- Extend Match model with home_score, away_score, completed
- Enhance MatchDialog to capture scores + completion flag
- Expand MatchesTab: search box, All Dates toggle, added columns (scores, completed)
- Implement filtering across teams/location/notes, multi-day view
- Add tests for result serialization
- Update roadmap (result entry + history browser) and README (enhancements section)
feat(matches): lineup editing & aggregate stats

- Add lineup editing (comma-separated field) to MatchDialog
- Introduce aggregate_stats & match_result helpers
- Add test_match_stats for aggregate metrics and result formatting
- Roadmap updated (match statistics task marked) & README adjusted

feat(matches): reminders system & stats panel integration

- Introduce Reminder & ReminderStore (in-memory scheduling)
- Extend MatchesTab with Add Reminder button and QTimer polling (2s interval)
- Popup notifications for due reminders; mark as triggered
- Aggregate stats panel now shows totals + win/draw breakdown + active reminder count
- Flexible schedule() API (accepts Reminder or (when, message, match_id))
- New tests: test_reminders (schedule, due, ordering, mark_triggered)
- Roadmap updated (reminder system marked complete; stats UI clarified)
- README updated with lineup, stats panel, and reminders features

feat(optimization): foundational optimization tab & algorithms

- Add optimization.optimizer module with optimize_lineup (qttr_max, balance)
- Implement OptimizationTab: size selector, objective combo, run button, progress bar, results table, summary
- Integrate tab into MainWindow with live player provider
- Brute-force combinatorial search (sufficient for small rosters) with balance spread heuristic
- New tests: test_optimizer (qttr_max selection, balance spread preference, error handling)
- Roadmap updated marking initial optimization interface tasks complete
- README updated with Optimization section (current + planned next)

feat(optimization): scenario history, availability filtering, presets & export

- Add ScenarioResult dataclass + markdown export (optimization/scenario.py)
- Extend OptimizationTab with: availability date filter, scenario history table, export, clear, presets save/load
- Implement availability-based filtering (date-based inclusion)
- Persist presets to config/optimization_presets.json
- Add tests: test_scenarios (markdown export content, availability filtering integration)
- Roadmap updated (availability-based optimization, what-if scenarios marked complete)
- README expanded Optimization section with new capabilities

