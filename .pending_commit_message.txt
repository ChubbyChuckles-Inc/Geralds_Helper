feat(matches): scores & history filtering

- Extend Match model with home_score, away_score, completed
- Enhance MatchDialog to capture scores + completion flag
- Expand MatchesTab: search box, All Dates toggle, added columns (scores, completed)
- Implement filtering across teams/location/notes, multi-day view
- Add tests for result serialization
- Update roadmap (result entry + history browser) and README (enhancements section)
feat(matches): lineup editing & aggregate stats

- Add lineup editing (comma-separated field) to MatchDialog
- Introduce aggregate_stats & match_result helpers
- Add test_match_stats for aggregate metrics and result formatting
- Roadmap updated (match statistics task marked) & README adjusted

feat(matches): reminders system & stats panel integration

- Introduce Reminder & ReminderStore (in-memory scheduling)
- Extend MatchesTab with Add Reminder button and QTimer polling (2s interval)
- Popup notifications for due reminders; mark as triggered
- Aggregate stats panel now shows totals + win/draw breakdown + active reminder count
- Flexible schedule() API (accepts Reminder or (when, message, match_id))
- New tests: test_reminders (schedule, due, ordering, mark_triggered)
- Roadmap updated (reminder system marked complete; stats UI clarified)
- README updated with lineup, stats panel, and reminders features

feat(optimization): foundational optimization tab & algorithms

- Add optimization.optimizer module with optimize_lineup (qttr_max, balance)
- Implement OptimizationTab: size selector, objective combo, run button, progress bar, results table, summary
- Integrate tab into MainWindow with live player provider
- Brute-force combinatorial search (sufficient for small rosters) with balance spread heuristic
- New tests: test_optimizer (qttr_max selection, balance spread preference, error handling)
- Roadmap updated marking initial optimization interface tasks complete
- README updated with Optimization section (current + planned next)

feat(optimization): scenario history, availability filtering, presets & export

- Add ScenarioResult dataclass + markdown export (optimization/scenario.py)
- Extend OptimizationTab with: availability date filter, scenario history table, export, clear, presets save/load
- Implement availability-based filtering (date-based inclusion)
- Persist presets to config/optimization_presets.json
- Add tests: test_scenarios (markdown export content, availability filtering integration)
- Roadmap updated (availability-based optimization, what-if scenarios marked complete)
- README expanded Optimization section with new capabilities

feat: players CSV import/export, optimization BestDelta, and robust matchplan parsing

- Players Tab: Added CSV Import and Export toolbar buttons with validation; implemented round-trip unit test (tests/test_csv_and_optimization.py) covering model persistence.
- Optimization: Extended Scenario history with BestDelta column showing delta vs best total so far; updated ScenarioResult.to_row() and GUI table to include the new column; added test coverage.
- Scraping: Improved parse_matchplan to accept minimal 7-column match plan tables (Nr/Tag/Datum/Zeit/Home/Away/Result) fixing failing test fixture; added explanatory comments.
- Compatibility: Removed dataclass slots usage for Python 3.8 environment support (scraping/models.py, parse_team.py).
- Testing: GUI import smoke tests now gracefully skip when PyQt6 is not installed (tests/test_gui_imports.py).
- Documentation: Updated README with CSV feature, BestDelta explanation, and parser robustness note.
- Roadmap: Marked CSV import/export and optimization history tracking tasks as completed; clarified implemented scope.

No functional changes outside described areas; all tests pass (non-GUI tests; GUI tests skipped if PyQt6 missing).

feat(optimization): what-if scenarios, scenario labels & auto re-run

- ScenarioResult extended with scenario_name and table/markdown export updated with Scenario column.
- Added what_if.py helper providing run_what_if_scenarios to batch-run exclusion scenarios.
- OptimizationTab: new Run What-If… dialog (multi-line input: `Name | exclude=Player1,Player2`) and Scenario column in history.
- Added Auto Re-run checkbox triggering optimization when availability date changes or external notify hook invoked.
- Added tests: test_what_if.py covering scenario_name row length and what-if exclusion logic.
- Roadmap updated: marked what-if analysis, real-time updates, and preset save/load tasks complete.
- README updated: optimization section reflects Scenario column, what-if dialog, and automation features.

All existing tests still pass; GUI additions guarded by pragma no cover where appropriate.

feat(optimization): exportable markdown report with ASCII chart

- Added optimization.report.build_report producing summary + ASCII bar chart + detailed table (scenario names & deltas).
- GUI: OptimizationTab now includes Generate Report button saving `optimization_report.md`.
- Scenario history integrated with reporting (Scenario column + delta logic reused).
- Tests: Added test_optimization_report.py covering empty history and populated summary/statistics output.
- Roadmap: Marked exportable optimization reports task complete (notes markdown + ASCII chart approach).
- README: Documented reporting workflow and report contents.

All tests pass post feature addition (GUI tests skipped if PyQt6 missing).

feat(optimization): weighted objective, GA fallback, reasoning & warnings

- Added new 'weighted' objective (score = total_qttr - weight_spread * spread) to balance overall strength vs fairness; GUI objective dropdown updated.
- Implemented genetic algorithm heuristic fallback (population, crossover, mutation) automatically invoked when combination count exceeds configurable threshold (ga_threshold).
- Added reasoning string (objective, parameters, players, totals, spread) and warnings list to LineupResult; warnings include 'high_spread' and 'heuristic_ga'.
- Introduced combination counter helper (_nCr) and GA parameters (generations, population, random seed) with deterministic defaults.
- Added advanced tests (test_optimizer_advanced.py) covering weighted spread preference, GA path invocation, reasoning & warnings.
- Roadmap updated: genetic algorithm, multi-objective weighting, validation & reasonableness checks marked complete (with inline notes).
- README updated: Optimization section now documents weighted objective, GA fallback, reasoning/warnings, and refined future plans.

All existing and new tests pass (GUI tests skipped when PyQt6 unavailable).

feat(optimization): performance prediction & Monte Carlo simulation

- Added prediction module (`optimization/prediction.py`) with logistic win probability model (Elo-like) based on summed team Q-TTR.
- Implemented Monte Carlo simulation (`monte_carlo_match`) producing empirical vs theoretical win probability stats (SimulationStats dataclass).
- Added tests (`tests/test_prediction.py`) validating symmetry (P(A,B) ≈ 1 - P(B,A)) and empirical convergence within tolerance for 500 trials.
- Updated roadmap: performance prediction and Monte Carlo simulation tasks marked complete with inline note.
- README Optimization section now documents prediction utilities and moves extended modeling to future plans.

All tests pass; new functionality is self-contained and does not alter existing optimizer APIs.

feat(analytics): rating trends & match outcome prediction wrapper

- Added analytics module (`analytics/performance.py`) providing `compute_rating_trend` (per-player slope & recent delta) and `team_strength_snapshot` aggregate stats.
- Extended prediction with `predict_match_outcome` returning binary win probability distribution and rating differential.
- Added tests (`tests/test_performance_analytics.py`) covering trend slope/delta logic and outcome probability normalization.
- Roadmap updated: performance trends & predictive modeling tasks marked complete (advanced analytics section).
- README updated: new Analytics & Prediction section documenting trend, snapshot, Monte Carlo, and outcome distribution features.

All tests (new + existing) pass in isolation; no existing APIs changed.

feat(analytics): opponent analysis, weight sensitivity & comparative delta matrix

- Added opponent lineup evaluation (`analytics/opponent.py`) providing probability-ranked lineup recommendations via existing prediction engine.
- Implemented weight spread sensitivity sweep (`analytics/sensitivity.py`) to explore weighted objective performance vs spread penalty parameter.
- Introduced comparative delta matrix utilities (`analytics/comparison.py`) for pairwise metric differences + markdown export.
- Added tests (`tests/test_advanced_analysis.py`) covering opponent evaluation ordering, sensitivity result set, and delta matrix correctness.
- Updated roadmap marking opponent analysis, comparative tools, and sensitivity analysis tasks complete (with inline rationale notes).
- README Analytics section expanded with usage and examples for new analysis capabilities.

All existing tests plus new advanced analysis tests pass (GUI tests still conditionally skipped if PyQt6 absent). No optimizer core changes.

